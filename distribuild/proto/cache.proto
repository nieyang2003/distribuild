syntax = "proto3";
package distribuild.cache;
import "google/protobuf/any.proto";

message CacheMeta {
  int32 exit_code = 1; // 必须为0才存入，似乎可以省略，但int好像没必要
  bytes stdout = 2;
  bytes stderr = 3;
  google.protobuf.Any extra_info = 4;
  bytes files_check_hash = 5;
}

// ----------------- TryGetEntry ----------------- //

message TryGetEntryRequest {
  string token = 2;
  string key   = 1;
}

message TryGetEntryResponseChunk {
  bytes file_chunk = 1;
}

// ----------------- PutEntry ----------------- //

message PutEntryRequest {
  string token = 2;
  string key   = 1;
}

message PutEntryRequestChunk {
  PutEntryRequest request = 1;
  bytes file_chunk = 2;
}

message PutEntryResponse {
  // nothing
}

// ----------------- FetchBloomFilter ----------------- //

message FetchBloomFilterRequest {
  // 请求者token
  string token = 3;
  // 上次获取`整个`布隆过滤器以来经过的秒数
  uint32 secs_last_full_fetch = 1;
  // 上次获取布隆过滤器以来经过的秒数
  uint32 secs_last_fetch = 2;
}

message FetchBloomFilterResponse {
  // 如果设置，则提供新键列表，否则返回整个布隆过滤器
  bool incremental = 1;
  // 新填充缓存条目的键列表
  repeated string newly_populated_keys = 2;
  // 为每个键生成的哈希值数量
  uint32 num_hashes = 3;
}

// ----------------- CacheService ----------------- //

service CacheService {
  // 获得缓存
  rpc TryGetEntry(TryGetEntryRequest) returns (stream TryGetEntryResponseChunk);
  // 获得缓存
  rpc PutEntry(stream PutEntryRequestChunk) returns (PutEntryResponse);
  // 向缓存服务器请求布隆过滤器内容
  rpc FetchBloomFilter(FetchBloomFilterRequest) returns (FetchBloomFilterResponse);
}